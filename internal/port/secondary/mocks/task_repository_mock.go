// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	entity "github.com/italorfeitosa/go-ports-n-adapters/internal/core/entity"
	mock "github.com/stretchr/testify/mock"

	uid "github.com/italorfeitosa/go-ports-n-adapters/pkg/uid"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

type TaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepository) EXPECT() *TaskRepository_Expecter {
	return &TaskRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: taskId
func (_m *TaskRepository) Get(taskId uid.UID) (*entity.Task, error) {
	ret := _m.Called(taskId)

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uid.UID) (*entity.Task, error)); ok {
		return rf(taskId)
	}
	if rf, ok := ret.Get(0).(func(uid.UID) *entity.Task); ok {
		r0 = rf(taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uid.UID) error); ok {
		r1 = rf(taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TaskRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - taskId uid.UID
func (_e *TaskRepository_Expecter) Get(taskId interface{}) *TaskRepository_Get_Call {
	return &TaskRepository_Get_Call{Call: _e.mock.On("Get", taskId)}
}

func (_c *TaskRepository_Get_Call) Run(run func(taskId uid.UID)) *TaskRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uid.UID))
	})
	return _c
}

func (_c *TaskRepository_Get_Call) Return(_a0 *entity.Task, _a1 error) *TaskRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_Get_Call) RunAndReturn(run func(uid.UID) (*entity.Task, error)) *TaskRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: _a0
func (_m *TaskRepository) Insert(_a0 *entity.Task) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Task) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type TaskRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - _a0 *entity.Task
func (_e *TaskRepository_Expecter) Insert(_a0 interface{}) *TaskRepository_Insert_Call {
	return &TaskRepository_Insert_Call{Call: _e.mock.On("Insert", _a0)}
}

func (_c *TaskRepository_Insert_Call) Run(run func(_a0 *entity.Task)) *TaskRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Task))
	})
	return _c
}

func (_c *TaskRepository_Insert_Call) Return(_a0 error) *TaskRepository_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_Insert_Call) RunAndReturn(run func(*entity.Task) error) *TaskRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepository(t mockConstructorTestingTNewTaskRepository) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
